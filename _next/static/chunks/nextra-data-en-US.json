{"/audits":{"title":"Audits","data":{"":"Name\tPublished\tBeraPaw - Core Contracts - Initial Report\t02/19/2025\tBeraPaw - Core Contracts - Final Report\t03/03/2025"}},"/contracts":{"title":"Contracts","data":{"":"Name\tAddress\tLBGT\t0xBaadCC2962417C01Af99fb2B7C75706B9bd6Babe\tBeraPawForge\t0xFeedb9750d6ac77D2E52e0C9EB8fB79F9de5Cafe\tStakedLBGT\t0xFace73a169e2CA2934036C8Af9f464b5De9eF0ca\tLBGT-WBERA Staking\t0xa77dee7bc36c463bB3E39804c9C7b13427D712B0\tpPAW\t0x03c86e21623f25Eca0eA544890c7603B9a33E1AC"}},"/bgtOptimization":{"title":"BGT Optimization","data":{"":"To maximize yields for $LBGT holders while maintaining decentralization, BeraPaw employs a range of low-risk, yield-enhancing strategies. These strategies are carefully balanced and governed by the community to ensure fairness and efficiency.","boosting-strategies#Boosting Strategies":"BGT boosting is allocated across several strategies, with the weight of each determined by BeraPaw's governance. Additional strategies may be introduced through governance approval. Below are the primary boosting strategies:","default-strategy#Default Strategy":"$PAW stakers can delegate their staking power to one or more validators of their choice. The allocation of BGT to each validator is proportional to the $PAW staked with them. Rewards for stakers are closely tied to the performance of the validators they select, encouraging careful and informed decisions that promote validator accountability.","boosting-auction#Boosting auction":"A portion of the BGT boosting power is auctioned to the highest bidder. This strategy is particularly attractive for:\nValidators seeking to enhance their profits.\nProtocols aiming to increase emissions to their pools, making them more competitive in the ecosystem.\nThis auction mechanism ensures that boosting power is allocated to those who value it most, while generating additional revenue for the protocol.","autoboosting-lbgt-pools#Autoboosting LBGT pools":"Validators who allocate at least 10% (value determined by governance) of their Berachefs to LBGT liquidity pools receive an automatic boost. This strategy deepens *$LBGT liquidity across the ecosystem, enhancing its utility in DeFi applications.By incentivizing $LBGT pools is expected that tokens will shift from stLBGT, increasing the overall $LBGT yield.","voting-strategies#Voting Strategies":"When voting on chain proposals, $PAW stakers are given three options:\nYes\nNo\nAbstain\nIf \"Abstain\" wins, the voting power is automatically sold to the highest bidder. This ensures that BeraPaw DAO actively participates in proposals critical to its interests, while monetizing its influence on less relevant matters to generate additional returns for $LBGT and $PAW stakers."}},"/contracts/LBGT":{"title":"LBGT","data":{"":"Author:\nBeraPawERC20 token representing liquid staked BGT in the BeraPaw protocolImplementation of liquid staking token with:\nCore functions:\nmint/burn: Controlled by BeraPawForge\nflash loans: Configurable amounts and fees\npermit: ERC20 gasless approvals","state-variables#State Variables":"","berapawforge#beraPawForge":"Gets BeraPaw Forge contract address.\naddress public immutable beraPawForge;","flashmintpercentualfee#flashMintPercentualFee":"Get the current percentual fee for flash minting LBGT tokensFee is represented in basis points (1 = 0.01%), with a max of 10,000 (100%)\nuint16 public flashMintPercentualFee;","flashfeecollector#flashFeeCollector":"Get the address that collects flash mint feesReturns address(0) if no fee collector has been set\naddress public flashFeeCollector;","flashmaxmint#flashMaxMint":"Get the maximum amount of LBGT that can be flash mintedFlash minters with ROLE_FLASH_MINTER bypass this limit\nuint256 public flashMaxMint;","functions#Functions":"","onlyberapawforge#onlyBeraPawForge":"modifier onlyBeraPawForge();","constructor#constructor":"constructor(\n    address _berapawForge,\n    address _owner\n)\n    ERC20(\"Liquid BGT\", \"LBGT\")\n    ERC20Permit(\"Liquid BGT\")\n    ERC20FlashMint();","setflashmintfee#setFlashMintFee":"Set the flash mint fee in basis points (bps).Only the admin can set the flash mint fee.\nfunction setFlashMintFee(uint16 _flashMintPercentualFee) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_flashMintPercentualFee\tuint16\tThe flash mint fee in basis points (bps).","setflashmaxmint#setFlashMaxMint":"Set the flash mint max limit.Only the admin can set the flash mint max limit.\nfunction setFlashMaxMint(uint256 _maxFlashMint) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_maxFlashMint\tuint256\tThe flash mint max limit.","setflashfeecollector#setFlashFeeCollector":"Set the flash fee collector address.Only the admin can set the flash fee collector address.\nfunction setFlashFeeCollector(address _feeCollector) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_feeCollector\taddress\tThe address to set as the flash fee collector.","mint#mint":"Mint new tokens to a given address.Only the BeraPaw vault can mint tokens.\nfunction mint(address to, uint256 amount) public onlyBeraPawForge;\nParameters\nName\tType\tDescription\tto\taddress\tThe address to mint tokens to.\tamount\tuint256\tThe amount of tokens to mint.","burn#burn":"Burn a given amount of tokens from a given address.Only the BeraPaw vault can burn tokens.\nfunction burn(address from, uint256 amount) public onlyBeraPawForge;\nParameters\nName\tType\tDescription\tfrom\taddress\tThe address to burn tokens from.\tamount\tuint256\tThe amount of tokens to burn.","maxflashloan#maxFlashLoan":"Get the max flash loan amount of the given token.Only LBGT can be flash loaned.\nThe ROLE_FLASH_MINTER can flash mint regardless of the limit.\nfunction maxFlashLoan(address token) public view override returns (uint256);\nParameters\nName\tType\tDescription\ttoken\taddress\tThe token to get the max flash loan amount for.\t\nReturns\nName\tType\tDescription\t<none>\tuint256\tThe max flash loan amount of the given token."}},"/contracts/LBGTWBERAStaking":{"title":"LPStakingRewards","data":{"":"Author:\nBeraPaw (Adapted from Berachain Team)A contract for staking LP tokens tokens and receive rewards for it.","functions#Functions":"","initialize#initialize":"function initialize(address _stakingToken, address _rewardToken, address _owner) external initializer;","depositreward#depositReward":"function depositReward(uint256 reward) external onlyRole(ROLE_ADMIN);","setrewardsduration#setRewardsDuration":"function setRewardsDuration(uint256 _rewardsDuration) external onlyRole(ROLE_GOD);","stake#stake":"function stake(uint256 amount) external;","withdraw#withdraw":"function withdraw(uint256 amount) external;","getreward#getReward":"function getReward(address recipient) external returns (uint256);"}},"/contracts/beraPawForge":{"title":"BeraPawForge","data":{"":"Author:\nBeraPawCore contract for BeraPaw protocol that holds BGT and issues LBGT at 1:1 ratio.\nIt is also has hooks for delegation operations and reward distribution.*This contract:\nHolds BGT tokens and issues LBGT at 1:1 ratio\nManages redemption queue for LBGT->BGT conversions\nHandles reward collection and distribution\nControls BGT boosting operations\nCollects BGT rewards from BGT staking contract*","state-variables#State Variables":"","bgt#bgt":"IBGT private constant bgt = IBGT(Constants.BGT);","lbgt#lbgt":"LBGT private constant lbgt = LBGT(Constants.LBGT);","bgtstaker#bgtStaker":"IBGTStaker private constant bgtStaker = IBGTStaker(Constants.BGT_STAKER);","honey#honey":"IERC20 private constant honey = IERC20(Constants.HONEY);","lbgtmanager#lbgtManager":"Returns the manager address for a given account and rewards vaultUsed to track who can manage LBGT rewards for an account\nmapping(address account => mapping(address rewardVault => address manager)) public lbgtManager;","redeemposition#redeemPosition":"Returns the redeem position for a given accountContains details about user's pending redemption\nmapping(address account => RedeemPosition) public redeemPosition;","redeemqueue#redeemQueue":"Returns redeem queue entry at specified indexUsed to track all redemption requests in order\nRedeemQueue[] public redeemQueue;","redeemqueueindex#redeemQueueIndex":"Returns the current index in the redeem queueRepresents the next position to be processed\nuint128 public redeemQueueIndex;","totalredeemqueue#totalRedeemQueue":"Returns total number of entries in redeem queueRepresents total redemption requests\nuint128 public totalRedeemQueue;","processingfee#processingFee":"Returns current processing feeFee charged for processing redemptions\nuint256 public processingFee;","queuedelay#queueDelay":"Returns delay period for queue processingMinimum time that must pass before processing redemptions\nuint96 public queueDelay;","minimumredeemamount#minimumRedeemAmount":"Returns minimum amount required for redemptionPrevents dust amounts from being redeemed\nuint128 public minimumRedeemAmount;","isprocessredemptionsopen#isProcessRedemptionsOpen":"Returns whether redemption processing is currently enabledControls if redemptions can be processed\nbool public isProcessRedemptionsOpen;","functions#Functions":"","onlyuserormanager#onlyUserOrManager":"modifier onlyUserOrManager(address _user, address _rewardVault);","constructor#constructor":"Note:\noz-upgrades-unsafe-allow: constructor\nconstructor();","initialize#initialize":"function initialize(address _owner) public initializer;","pause#pause":"Pause all user functions.Only the curator can pause the forge.\nfunction pause() public onlyRole(ROLE_CURATOR);","unpause#unpause":"Unpause the forge.Only the admin can unpause the forge.\nfunction unpause() public onlyRole(ROLE_ADMIN);","delegate#delegate":"Delegates the underlying BGT token to another address for voting purposes.\nthis address can vote on behalf of this contract. Should be set to the governance\ntimelock contract.Only the admin can delegate the LBGT token.\nfunction delegate(address _delegate) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_delegate\taddress\tThe address to delegate the underlying BGT token to.","setqueuedelay#setQueueDelay":"Sets the queue delay for redemptions.Only the admin can set the queue delay.\nfunction setQueueDelay(uint96 _queueDelay) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_queueDelay\tuint96\tThe new queue delay in blocks.","setminimumredeemamount#setMinimumRedeemAmount":"Sets the minimum redeem amount.Only the admin can set the minimum redeem amount.\nfunction setMinimumRedeemAmount(uint128 _minimumRedeemAmount) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_minimumRedeemAmount\tuint128\tThe new minimum redeem amount.","setprocessingfee#setProcessingFee":"Sets the processing fee for redemptions.Only the admin can set the processing fee.\nfunction setProcessingFee(uint256 _processingFee) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_processingFee\tuint256\tThe new processing fee as a percentage (1e18 = 100%).","setopenprocessredemptions#setOpenProcessRedemptions":"Sets whether redemption processing is open to non-processorsOnly callable by GOD role\nfunction setOpenProcessRedemptions(bool _open) public onlyRole(ROLE_GOD);\nParameters\nName\tType\tDescription\t_open\tbool\tTrue to allow anyone to process redemptions, false to restrict to processors only","recover#recover":"function recover(address token, address to, uint256 amount) external onlyRole(ROLE_GOD);","setmanager#setManager":"Recovers ERC20 tokens accidentally sent to the contractOnly callable by GOD role\nfunction setManager(address rewardVault, address manager) external;\nParameters\nName\tType\tDescription\trewardVault\taddress\tThe rewards vault to set the manager for.\tmanager\taddress\tThe address of the manager.","setmanagermulti#setManagerMulti":"Sets the managers for a set of reward vaults.rewardVaults and managers must have the same length.\nfunction setManagerMulti(address[] calldata rewardVaults, address[] calldata managers) external;\nParameters\nName\tType\tDescription\trewardVaults\taddress[]\tThe reward vaults to set the manager for.\tmanagers\taddress[]\tAddresses of the managers.","mint#mint":"Mints LBGT for a user.\nfunction mint(\n    address user,\n    address rewardVault,\n    address recipient\n)\n    external\n    nonReentrant\n    whenNotPaused\n    returns (uint256);\nParameters\nName\tType\tDescription\tuser\taddress\tThe user for whom rewards are claimed.\trewardVault\taddress\tThe rewards vault from which rewards are claimed.\trecipient\taddress\tThe address receiving the minted LBGT.\t\nReturns\nName\tType\tDescription\t<none>\tuint256\tThe amount of LBGT minted.","mintreferred#mintReferred":"Mints LBGT for a user with a referrer.\nfunction mintReferred(\n    address user,\n    address rewardVault,\n    address recipient,\n    bytes32 data\n)\n    external\n    nonReentrant\n    whenNotPaused\n    returns (uint256);\nParameters\nName\tType\tDescription\tuser\taddress\tThe user for whom rewards are claimed.\trewardVault\taddress\tThe rewards vault from which rewards are claimed.\trecipient\taddress\tThe address receiving the minted LBGT.\tdata\tbytes32\t\t\nReturns\nName\tType\tDescription\t<none>\tuint256\tThe amount of LBGT minted.","mintmulti#mintMulti":"Mints LBGT for multiple users.\nfunction mintMulti(\n    address[] calldata users,\n    address[] calldata rewardVaults,\n    address[] calldata recipients\n)\n    external\n    nonReentrant\n    whenNotPaused\n    returns (uint256);\nParameters\nName\tType\tDescription\tusers\taddress[]\tArray of user addresses.\trewardVaults\taddress[]\tArray of rewards vault addresses corresponding to users.\trecipients\taddress[]\tArray of recipient addresses.\t\nReturns\nName\tType\tDescription\t<none>\tuint256\tThe total amount of LBGT minted.","queueredeem#queueRedeem":"Queues a redeem request for a user.\nfunction queueRedeem(uint128 amount) external whenNotPaused;\nParameters\nName\tType\tDescription\tamount\tuint128\tThe amount of LBGT to redeem.","redeem#redeem":"Redeems LBGT for a user.\nfunction redeem(uint128 amount, address recipient) external whenNotPaused;\nParameters\nName\tType\tDescription\tamount\tuint128\tThe amount of LBGT to redeem.\trecipient\taddress\tThe address receiving the redeemed amount.","processredemptions#processRedemptions":"Processes redemption requests.\nfunction processRedemptions(uint128 maxBatchSize, address recipient) external payable whenNotPaused;\nParameters\nName\tType\tDescription\tmaxBatchSize\tuint128\tThe maximum number of redemption requests to process.\trecipient\taddress\tThe address receiving the redeemed amount.","collectstakerreward#collectStakerReward":"function collectStakerReward(address to) external onlyRole(ROLE_REWARD_COLLECTOR) returns (uint256);","queueboost#queueBoost":"Queues a new boost of the validator with an amount of BGT from msg.sender.Reverts if msg.sender does not have enough unboosted balance to cover amount.\nfunction queueBoost(bytes calldata pubkey, uint128 amount) external onlyRole(ROLE_BOOSTER);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to be boosted.\tamount\tuint128\tThe amount of BGT to use for the queued boost.","cancelboost#cancelBoost":"Cancels a queued boost of the validator removing an amount of BGT for msg.sender.Reverts if msg.sender does not have enough queued balance to cover amount.\nfunction cancelBoost(bytes calldata pubkey, uint128 amount) external onlyRole(ROLE_BOOSTER);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to cancel boost for.\tamount\tuint128\tThe amount of BGT to remove from the queued boost.","activateboost#activateBoost":"Boost the validator with an amount of BGT.\nfunction activateBoost(bytes calldata pubkey) external onlyRole(ROLE_BOOSTER) returns (bool);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to be boosted.\t\nReturns\nName\tType\tDescription\t<none>\tbool\tbool False if amount is zero or if enough time has not passed, otherwise true.","queuedropboost#queueDropBoost":"Queues a drop boost of the validator removing an amount of BGT for sender.Reverts if does not have enough boosted balance to cover amount.\nfunction queueDropBoost(bytes calldata pubkey, uint128 amount) external onlyRole(ROLE_BOOSTER);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to remove boost from.\tamount\tuint128\tThe amount of BGT to remove from the boost.","canceldropboost#cancelDropBoost":"Cancels a queued drop boost of the validator removing an amount of BGT for sender.\nfunction cancelDropBoost(bytes calldata pubkey, uint128 amount) external onlyRole(ROLE_BOOSTER);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to cancel drop boost for.\tamount\tuint128\tThe amount of BGT to remove from the queued drop boost.","dropboost#dropBoost":"Drops an amount of BGT from an existing boost of validator.\nfunction dropBoost(bytes calldata pubkey) external onlyRole(ROLE_BOOSTER) returns (bool);\nParameters\nName\tType\tDescription\tpubkey\tbytes\tThe pubkey of the validator to remove boost from.\t\nReturns\nName\tType\tDescription\t<none>\tbool\tbool False if amount is zero or if enough time has not passed, otherwise true.","lbgtaddress#lbgtAddress":"Returns the LBGT token address.\nfunction lbgtAddress() public pure returns (address);\nReturns\nName\tType\tDescription\t<none>\taddress\tThe address of LBGT.","getbgtoperator#getBGTOperator":"Returns the BGT operator address for the given rewards vault and user.The BGT operator is the address that can claim BGT rewards for the given user and rewards vault.\nfunction getBGTOperator(address rewardVault, address account) public view returns (address);\nParameters\nName\tType\tDescription\trewardVault\taddress\tThe rewards vault to get the BGT operator from.\taccount\taddress\tThe user account to get the BGT operator from.\t\nReturns\nName\tType\tDescription\t<none>\taddress\tThe BGT operator address for the given rewards vault and user.","boostablebgt#boostableBGT":"Returns the amount of BGT minus the amount queued for redeem.\nfunction boostableBGT() public view returns (uint256);\nReturns\nName\tType\tDescription\t<none>\tuint256\tThe amount of boostable BGT.","receive#receive":"receive() external payable;","fallback#fallback":"fallback() external payable;"}},"/contracts/stakedLBGT":{"title":"StakedLbgt","data":{"state-variables#State Variables":"","lbgt#LBGT":"address public constant LBGT = Constants.LBGT;","exitfee#exitFee":"Returns the current exit fee rate in basis points (1/10000)This fee is applied when users redeem or withdraw staked LBGT\nuint16 public exitFee;","functions#Functions":"","initialize#initialize":"function initialize(address _owner) public initializer;","setexitfee#setExitFee":"Sets the exit fee for the staking contractThis function can only be called by accounts with ROLE_ADMIN permission\nfunction setExitFee(uint16 _exitFee) public onlyRole(ROLE_ADMIN);\nParameters\nName\tType\tDescription\t_exitFee\tuint16\tThe new exit fee to be set, expressed in basis points (1/10000th). Must not exceed BASIS_POINT_SCALE (10000)","pause#pause":"Pause the vault.Only the curator can pause the vault.\nfunction pause() public onlyRole(ROLE_CURATOR);","unpause#unpause":"Unpause the vault.Only the admin can unpause the vault.\nfunction unpause() public onlyRole(ROLE_ADMIN);","deposit#deposit":"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\nMUST emit the Deposit event.\nMAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\ndeposit execution, and are accounted for during deposit.\nMUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\napproving enough underlying tokens to the Vault contract, etc).\nNOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.*\nfunction deposit(\n    uint256 assets,\n    address receiver\n)\n    public\n    override(IERC4626, ERC4626Upgradeable)\n    whenNotPaused\n    returns (uint256);","mint#mint":"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\nMUST emit the Deposit event.\nMAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\nexecution, and are accounted for during mint.\nMUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\napproving enough underlying tokens to the Vault contract, etc).\nNOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.*\nfunction mint(\n    uint256 shares,\n    address receiver\n)\n    public\n    override(IERC4626, ERC4626Upgradeable)\n    whenNotPaused\n    returns (uint256);","withdraw#withdraw":"Burns shares from owner and sends exactly assets of underlying tokens to receiver.\nMUST emit the Withdraw event.\nMAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\nwithdraw execution, and are accounted for during withdraw.\nMUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\nnot having enough shares, etc).\nNote that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\nThose methods should be performed separately.*\nfunction withdraw(\n    uint256 assets,\n    address receiver,\n    address owner\n)\n    public\n    override(IERC4626, ERC4626Upgradeable)\n    whenNotPaused\n    returns (uint256);","redeem#redeem":"Burns exactly shares from owner and sends assets of underlying tokens to receiver.\nMUST emit the Withdraw event.\nMAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\nredeem execution, and are accounted for during redeem.\nMUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\nnot having enough shares, etc).\nNOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\nThose methods should be performed separately.*\nfunction redeem(\n    uint256 shares,\n    address receiver,\n    address owner\n)\n    public\n    override(IERC4626, ERC4626Upgradeable)\n    whenNotPaused\n    returns (uint256);","previewdeposit#previewDeposit":"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\ncurrent on-chain conditions.\nMUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\ncall in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\nin the same transaction.\nMUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\ndeposit would be accepted, regardless if the user has enough tokens approved, etc.\nMUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\nMUST NOT revert.\nNOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\nshare price or some other type of condition, meaning the depositor will lose assets by depositing.*\nfunction previewDeposit(uint256 assets) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256);","previewmint#previewMint":"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\ncurrent on-chain conditions.\nMUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\nin the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\nsame transaction.\nMUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\nwould be accepted, regardless if the user has enough tokens approved, etc.\nMUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\nMUST NOT revert.\nNOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\nshare price or some other type of condition, meaning the depositor will lose assets by minting.*\nfunction previewMint(uint256 shares) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256);","previewwithdraw#previewWithdraw":"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\ngiven current on-chain conditions.\nMUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\ncall in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\ncalled\nin the same transaction.\nMUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\nthe withdrawal would be accepted, regardless if the user has enough shares, etc.\nMUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\nMUST NOT revert.\nNOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\nshare price or some other type of condition, meaning the depositor will lose assets by depositing.*\nfunction previewWithdraw(uint256 assets) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256);","previewredeem#previewRedeem":"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\ngiven current on-chain conditions.\nMUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\nin the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\nsame transaction.\nMUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\nredemption would be accepted, regardless if the user has enough shares, etc.\nMUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\nMUST NOT revert.\nNOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\nshare price or some other type of condition, meaning the depositor will lose assets by redeeming.*\nfunction previewRedeem(uint256 shares) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256);"}},"/":{"title":"Index","data":{"":"This documentation is intended to guide you through the core principles and key features of the BeraPaw protocol.\nBeraPaw is an innovative liquid staking protocol that converts Berachain’s native token into a more versatile and liquid asset, providing users with a seamless and hassle-free experience.For any further questions or information, please feel free to reach out to us through the social media accounts listed below:","our-socials#Our Socials":"","tokens#Tokens":"","the-next-steps#The Next Steps":""}},"/lbgt":{"title":" $LBGT","data":{"liquid-bgt#Liquid BGT":"The Liquid Bera Governance Token ($LBGT) is a core component of BeraPaw. It tokenizes Berachain's native Governance, BGT, into a liquid, transferable asset. This innovation simplifies participation in Berachain’s Proof of Liquidity (PoL) by automating rewards and delegations while providing users with the flexibility to trade and utilize $LBGT across decentralized finance (DeFi) ecosystems.","how-to-mint#How to mint?":"To mint $LBGT, users stake their Liquidity Pool (LP) tokens in a chain-native, whitelisted rewards vault. This process mirrors standard BGT acquisition, but with an additional option: users can choose to convert their earned BGT into $LBGT. As a result, every $LBGT is backed 1:1 by BGT held in BeraPaw vault.","interactions-and-uses#Interactions and uses":"Transferable: $LBGT is fully transferable and can be traded on various decentralized exchanges, providing liquidity and utility for users and liquidity providers.\nDelegation: $LBGT is automatically delegated to validators on the Berachain network, following a delegation strategy determined by $PAW holders. This ensures that $LBGT continues to earn all block and incentives rewards generated by the underlying BGT.\nRewards: Users have to stake $LBGT to receive incentives rewards. Rewards are reinvested and auto-compounded and since not all $LBGT will be staked, users can expect to receive a multiplier on their earnings.\nTokenization: DeFi vaults can utilize $LBGT to pass along rewards to their users in a streamlined and efficient way. By tokenizing their yields into $LBGT, vaults make it possible to provide users with increased returns while enabling even more yield farming strategies.\nRedeemable: Users can burn their $LBGT for BERA, same as BGT.","supply-and-value-proposal#Supply and Value Proposal":"Supply: Dynamic, based on the amount of BGT held by BeraPaw on a 1:1 ratio.\nUtility: Earn incentives rewards, use across DeFi ecosystem and redeem for BERA.\nIntrinsic Value: Tied to the on-chain incentives it circulates, alongside its flexibility and broad DeFi applications. Due to the redeem mechanics, its value can never drop below one BERA, ensuring a secure and reliable financial baseline."}},"/lbgt/lbgtStaking":{"title":"$LBGT Staking","data":{"":"To earn incentive rewards, $LBGT must be staked in BeraPaw's contract. Stakers receive stLBGT as a receipt token, which automatically compounds the incentives generated from PoL activities. By staking their $LBGT, users seamlessly participate in the PoL ecosystem while enjoying automated profit reinvestment.","why-stlbgt#Why stLBGT?":"Staking $LBGT offers users a simplified and optimized experience by automating all aspects of incentive management. This includes handling validator delegations, multiple incentive tokens, and reinvesting earnings—all without requiring manual intervention.","boosted-yields#Boosted Yields":"Staked $LBGT benefits from all incentives generated by both staked and unstaked $LBGT. Since $LBGT can also be utilized for liquidity provision and other activities within the ecosystem, not all $LBGT will be staked at any given time. As a result, stakers can expect boosted yields compared to traditional BGT operations by leveraging the broader utility of $LBGT within the DeFi landscape.","index-token-design#Index Token Design":"To ensure compatibility with DeFi protocols, stLBGT functions as an index token. Over time, the $LBGT value of each stLBGT increases as rewards are compounded. Users can stake or unstake their tokens at any time without incurring fees, providing flexibility and ease of use."}},"/liquidityVault":{"title":"Liquidity Vault","data":{"":"[REDACTED]"}},"/paw":{"title":" $PAW","data":{"berapaw-governance-token#BeraPaw Governance Token":"The Governance token of the BearPaw protocol plays a crucial role in the $LBGT delegation process and overall protocol governance. $PAW token can be staked to influence the validator delegation structure, vote on chain proposals and receive protocol rewards. This democratic process ensures that the protocol evolves in line with the community's interests.","interactions-and-uses#Interactions and Uses":"Staking: Users are required to stake their $PAW tokens to receive stPAW in order to have any use within BerPaw protocol. Through $PAW, users will be able to delegate the protocol's BGT to a validator of their choosing, vote on chain proposals and influence BeraPaw governance. In addition rewards generated by BeraPaw will be rewarded to the stakers.\nRewards: By staking $PAW users will receive a constant stream of rewards generated by BeraPaw operations.\nProtocol Governance: $PAW stakers can vote on proposals and decisions within BearPaw Governance. These votes shape the future direction of the protocol and guide its improvements.\nChain Governance: $PAW stakers are able to decide on how the protocol will vote on the chain governance with the underlying BGT.","supply-and-value-proposal#Supply and Value Proposal":"Supply: Limited, ensuring deflationary pressure. Total Supply: 100,000,000.\nUtility: Staking Rewards, Protocol Governance, Chain Governance, Validator delegation structure.\nValue Proposition: Tied to the total BGT held by BeraPaw, the growth of BeraPaw will drive the intrinsic value of $PAW up.","economic-model#Economic Model":"$PAW stakers are the owners of BeraPaw. The value of $PAW is tied to the total BGT held by the BeraPaw protocol, the amount of rewards being streamed, governance power and delegation power. As the protocol accumulates more BGT through various mechanisms the intrinsic value of $PAW increases, benefiting all $PAW holders. Additionally, $PAW is a deflationary token because of it's limited supply so holders are protected from potential dilutions."}},"/paw/tokenomics":{"title":"$PAW Tokenomics","data":{"":"Total Supply: 100,000,000Distributed between the following:\nCategory\tDistribution (%)\tDescription\tEmission Schedule\tPublic Sale\tTBA\tTokens to be sold openly after TGE. Resources will fund Paw Treasury.\tTBA\tPre Sale\tTBA\tEarly token sale event offered to early private investors for seed funding.\tTBA\tTreasury\tTBA\tAmount held by the treasury for future use. Won’t be used for staking or vote, will be inert until future DAO use.\tTBA\tAirdrop\tTBA\tToken compensation to early community that helped with BeraPaw growth.\tTBA\tMarket Making\tTBA\tEnhance liquidity and stabilize trading conditions on exchanges, ensuring a smooth market experience for all participants. Market tokens are inert and hold no power within the protocol.\tTBA\tIncentives\tTBA\tBudget used to incentivize validators to emit BGT to our gauges and bootstrap $LBGT minting.\tTBA\tPawLabs\tTBA\tTokens held by the controller entity used to grow BeraPaw and reward core contributors.\tTBA"}},"/protocolOverview":{"title":"Protocol Overview","data":{"governance#Governance":"BeraPaw is a Decentralized Autonomous Organization (DAO) and $PAW holders are it's owners. Through voting and proposal creation the owners will have control over protocol parameters and decisions about the future of BeraPaw. Users are required to stake $PAW to be able to exercise their governance power.","treasury#Treasury":"Treasury assets are owned and managed by BeraPaw's governance. Its primary function is to incentivize validators BGT emission and to provide liquidity for $PAW token. The treasury may at some point engage in other activities as long as the governance allows it.","lbgt#LBGT":"$LBGT is a token that abstracts BGT and make it transferable while also providing access to blockchain rewards and added utilities. $LBGT can be minted in a permissionless manner by claiming BGT to our contracts or redeemed for Bera. Every $LBGT backed by BGT in a 1:1 ratio.","lbgt-staking#LBGT Staking":"When holders stake $LBGT they receive stLBGT as receipt, an index transferable token. Incentives and block rewards received from validator delegations are autocompounded into $stLBGT, that means that the user can participate in PoL and reinvest funds in a automated manner. Users can stake and unstake at any time without any accruing fees.","paw#PAW":"$PAW is BeraPaw's governance token, a deflationary asset that represents a user share of BeraPaw DAO. $PAW must be staked in order have to receive protocol rewards or be used within BeraPaw.","paw-staking#PAW Staking":"When holders stake their $PAW they receive stPAW and a receipt, a non-transferable token that allows the holder to receive protocol rewards, participate in BeraPaw's governance, vote on the chain governance and choose the protocol validator delegation structure.","liquidity-vault#Liquidity Vault":"[REDACTED]"}},"/roadmap":{"title":"Roadmap","data":{"phase-1-protocol-launch-and-liquidity-acquisition#Phase 1: Protocol Launch and Liquidity Acquisition":"Deploy Core Contracts: Deploy the $LBGT and $PAW token contracts alongside staking, rewards, and delegation mechanisms.\nInitial $PAW Distribution: Effectively Distribute $PAW across the ecosystem to pave the road to decentralization\n$LBGT Minting Campaign: Launch incentivized $LBGT minting campaign and build up it's total supply.\nImplement Default Strategies: Activate the default validator boosting strategy to maximize $LBGT rewards.\nInitial Governance Setup: Introduce basic governance functionality, allowing $PAW holders to stake, vote, and propose changes.\nLiquidity Pool Launch: Establish initial $LBGT and $PAW liquidity pools with key assets (e.g., BERA) to enable trading and ease entry/exit positions.","phase-2-ecosystem-growth-and-utility-expansion#Phase 2: Ecosystem Growth and Utility Expansion":"Deepen Liquidity: Expand $LBGT liquidity pools to other key assets and chains, ensuring improved trading depth and accessibility.\nBGT optimization deployment: Deploy various BGT boosting strategies to enhance $LBGT yield.\nValidator Performance Metrics: Deploy tools to track validator performance and provide transparency for $PAW stakers when choosing validators.\nVaults Performance Metrics: Deploy tools to track reward vaults performance and provide transparency for Liquidty Providers when minting $LBGT.\nLBGT Usability: Begin integrating $LBGT into major DeFi protocols on Berachain for lending, collateralization, and other DeFi applications.\nPartnership Development: Collaborate with protocols to build on top of $LBGT and develop innovative use cases.","phase-3-decentralization#Phase 3: Decentralization":"Revoke Ownership of contracts: PawLabs will revoke all ownerships of core protocol contracts.\nFoundation Detachment: Detach all PawLabs influence over BeraPaw."}},"/vision":{"title":"Our Vision","data":{"":"BeraPaw’s implementation of a new approach to Berachain’s Proof of Liquidity (PoL) consensus model serves as the foundation for a broader vision. We aim to expand the utility, usability, and impact of $LBGT across the ecosystem while fostering innovation and inclusivity. Below are some of the key goals driving the future development of BeraPaw:1- Deepen LBGT Liquidity\nEstablish robust liquidity for $LBGT by pairing it with key assets across the ecosystem. This will ensure seamless entry and exit positions for users, improving accessibility and reducing friction for participants at all levels.2- Enhance Usability and Composability\nPosition $LBGT not just as a Liquid BGT Wrapper but as a core DeFi asset. By integrating $LBGT with various protocols and expanding its composability, we aim to unlock its full potential and establish it as a cornerstone of Berachain's DeFi ecosystem.3- Incentivize Protocol Innovation\nEncourage protocols to build on top of $LBGT by offering a flexible and interoperable foundation. With $LBGT as a building block, developers can create derivatives and innovative products that enhance the overall utility and diversity of Berachain’s ecosystem.4- Expand LBGT Utility\nContinuously improve the BeraPaw protocol to introduce new tools, features, and options for both users and protocols. Our goal is to provide a comprehensive suite of solutions tailored to the diverse needs of the ecosystem, enhancing the value proposition of $LBGT for all stakeholders.By pursuing these objectives, BeraPaw seeks to redefine what BGT can achieve on PoL, building a sustainable, decentralized, and innovation-friendly ecosystem that benefits every participant."}},"/whatIsBeraPaw":{"title":"What is BeraPaw?","data":{"":"BeraPaw is a novel liquid wrapper protocol built atop Berachain’s Proof of Liquidity (PoL) consensus mechanism. It simplifies and automates PoL interactions for participants, enabling them to unlock the full potential of Berachain’s governance token, BGT, in a decentralized and user-friendly manner.At its core, BeraPaw transforms Berachain’s native yield-bearing token, BGT, into a more versatile and liquid asset called Liquid BGT ($LBGT). This process unlocks a host of benefits for users:\nFlexibility: Users can buy, sell, collateralize, enter leveraged positions, or use $LBGT anyway across the DeFi ecosystem.\nConvenience: All PoL interactions, including staking and rewards reinvestment, are automated.\nHigher Yields: $LBGT provides enhanced returns compared to traditional BGT delegations.\nTo ensure complete decentralization, BeraPaw also introduces a governance token called $PAW. $PAW holders are the protocol’s owners, with the power to decide how BGT is delegated across validators while earning protocol rewards.","decentralization-a-core-principle#Decentralization: A Core Principle":"BeraPaw is designed with decentralization at its heart. As a Decentralized Autonomous Organization (DAO), no single entity has unilateral control over the protocol or the consensus power it manages. Instead, governance is distributed among the community through the $PAW token.Key decentralization features include:\nValidator Agnostic: BeraPaw works with all validators permissionlessly to avoid conflict of interest and maximize rewards for users.\nCommunity-Driven Optimization: $PAW holders actively participate in optimizing BGT delegations to validators.\nDecentralized Decision-Making: The protocol evolves based on the collective decisions of $PAW holders, ensuring fairness and transparency.","tokens#Tokens":"","liquid-bgt-lbgt#Liquid BGT ($LBGT)":"$LBGT is the liquid BGT wrapper issued by BeraPaw. It represents tokenized BGT and enables users to interact with Berachain’s PoL mechanism more efficiently.Key Features of $LBGT:\nHigher Yields: $LBGT provides enhanced returns compared to traditional BGT delegation.\nFlexibility: Users can trade, sell, collateralize, enter leveraged positions, or deploy $LBGT across the DeFi ecosystem.\nConvenience: All PoL interactions, including delegation and rewards reinvestment, are automated.","governance-token-paw#Governance Token ($PAW)":"$PAW is the governance token of the BeraPaw protocol. It grants holders ownership and decision-making power over the DAO, ensuring decentralized control and alignment with community interests.Key Features of $PAW:\nGovernance Power: Determines BGT delegation strategies and protocol upgrades.\nReward Sharing: Earn a share of protocol-generated rewards.\nDecentralized Decision-Making: Shapes the future of BeraPaw and its validator delegations.\nLimited Supply: With a fixed total supply, $PAW ensures scarcity and long-term value.\nBy combining $LBGT’s flexibility with $PAW’s governance power, BeraPaw delivers a fully decentralized, high-yield liquid staking solution that aligns with the principles of Berachain’s PoL ecosystem."}},"/whyBeraPaw":{"title":"Why BeraPaw ?","data":{"":"BeraPaw abstracts all boring tasks required to interact with Proof of Liquidity (PoL), while addressing key challenges like centralization, inefficiencies, and conflicts of interest. By automating the complexities of PoL and offering enhanced yields, BeraPaw provides a user-friendly solution that improves the PoL experience for all participants.","lbgt-x-bgt#$LBGT x BGT":"With $LBGT, users no longer need to worry about selecting validators, dealing with delegation queues, manually claiming rewards, or reinvesting earnings while offering seamless entry and exit from BGT positions while providing superior yields.For protocols employing multi-layered yield farming strategies, distributing native BGT yields to users is very complex or maybe impossible. By utilizing $LBGT, protocols can streamline the returns to their users. This approach not only boosts overall yields but also positions these protocols as more competitive players within the DeFi ecosystem.With $LBGT, protocols, seasoned DeFi users, and newcomers can easily operate on PoL without associated complexities. This makes $LBGT the optimal choice for those seeking a frictionless and high-performing PoL experience.","berapaw-x-centralized-bgt-wrappers#BeraPaw x Centralized BGT Wrappers":"In Berachain's PoL, validators are meant to compete for BGT delegations by offering the highest possible rewards to delegators. However, when a validator controls its own BGT, it creates a conflict of interest and potential centralization issues. Validators with control over BGT may prioritize shifting profits toward themselves, engaging in off-chain deals, or manipulating incentives instead of distributing fair rewards to the holders of their BGT wrappers.This centralization also affects chain governance. Validators with concentrated control over BGT can disproportionately influence on-chain decision-making, weakening the decentralized principles of Berachain. Over time, this could lead to skewed governance decisions that benefit a select few rather than the broader ecosystem.BeraPaw takes a fundamentally different approach. By not operating its own validator, BeraPaw instead optimizes BGT delegations across all validators in a decentralized, transparent manner. By also distributing chain voting power to the community we maintain a fair competition among validators and protocols, ensure that rewards are maximized for users, and safeguards the chain's decentralization and security."}}}